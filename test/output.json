[{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"今年早些时候，奇舞团开源的 Node.js 框架 ──"},{"name":"a","attrs":{"class":"rich-text-a"},"children":[{"type":"text","text":"ThinkJS"}]},{"type":"text","text":"迎来了她的 3.0 版本。尽管今年我很少更新博客，但「每次 ThinkJS 发布大版本，我都要更新博客程序」的老传统还是不能丢。所以，你现在看到的这个博客，已经是基于 ThinkJS 3 全面重构后的新版。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"ThinkJS 3 基于"},{"name":"a","attrs":{"class":"rich-text-a"},"children":[{"type":"text","text":"Koa"}]},{"type":"text","text":"2.x 开发，内核实现得非常小巧，框架通过 Middleware（兼容 Koa）、Adapter、Extend 等机制来扩展出强大而丰富的功能。按照惯例，ThinkJS 大版本之间无法平滑进行，但这次升级带来的工作量不算太大，本站的升级工作花了一下午全部完成。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"基于 ThinkJS 开发的网站普遍都很快，这篇文章我打算聊聊如何为 ThinkJS 3 网站优化 TTFB 时间，使之变得更快。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"Time to first byte（简称 TTFB）时间，又称首字节时间，是 WEB 性能优化中非常重要的指标。它代表着从浏览器发起 HTTP 请求到收到 HTTP 响应第一个字节的这段时间，包含了 DNS 解析、建立 TCP 连接、建立 SSL 连接、发送 HTTP 请求、网络传输、服务端处理、30X 重定向等阶段。在影响 TTFB 所有因素中，服务端程序何时输出响应决定了服务端处理时间的长短，也是本文关注的优化目标。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"优化 WEB 页面的 TTFB 时间除了要尽可能优化业务逻辑之外，还有两个常用技巧："}]},{"name":"ul","attrs":{"class":"rich-text-ul"},"children":[{"name":"li","attrs":{"class":"rich-text-li"},"children":[{"type":"text","text":"多个 HTTP 请求响应（动静拆分）；"}]},{"name":"li","attrs":{"class":"rich-text-li"},"children":[{"type":"text","text":"一个 HTTP 请求多次响应（分块传输）；"}]}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"前者无非就是先尽快输出一个无服务端复杂逻辑的空壳页面，再发起 ajax、jsonp 等异步请求填充内容。这种方案不利于 SEO，比较适用于单页应用。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"像本站这种以内容为主的 Web 页面，非常适合采用第二个技巧来优化 TTFB 时间。本文重点介绍它。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"分块传输响应需要用到我之前介绍过的"},{"name":"a","attrs":{"class":"rich-text-a"},"children":[{"type":"text","text":"HTTP Transfer-Encoding: chunked"}]},{"type":"text","text":"机制。有了这个机制，服务端可以随时将已经完成的部分响应发送给给客户端，而不必等待全部完成后再一次发送。浏览器拿到部分响应，就能解析并执行其中的 HTML、CSS 和 JS 代码，还能加载其中引用的子资源，最终让用户更快看到部分页面内容。分块传输也是 Facebook 在 2009 年实现的 Bigpipe 方案的理论基础，这里不再赘述。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"再来说说 ThinkJS。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"在 ThinkJS 之前几个版本中，我们可以通过"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"http.write(content)"}]},{"type":"text","text":"发送多个 chunk，再通过"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"http.end(content)"}]},{"type":"text","text":"发送最后一个 chunk，非常方便。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"而 ThinkJS 3 使用的 Koa 2.x，只能通过"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"ctx.body"}]},{"type":"text","text":"设置并结束响应，意味着通常情况下响应只能发送一次，还得放在整个 Controller 流程的最后。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"通过分析代码，我找到在 ThinkJS 3 中多次发送响应的两种方案："}]},{"name":"ul","attrs":{"class":"rich-text-ul"},"children":[{"name":"li","attrs":{"class":"rich-text-li"},"children":[{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"ctx.body"}]},{"type":"text","text":"支持传入 Stream，创建 Readable 流"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"rs"}]},{"type":"text","text":"并多次调用"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"rs.push(content)"}]},{"type":"text","text":"可以多次发送 chunk，调用"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"rs.push(null)"}]},{"type":"text","text":"可以结束响应；"}]},{"name":"li","attrs":{"class":"rich-text-li"},"children":[{"type":"text","text":"Koa 代码层面上并没有禁止我们使用"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"ctx.res"}]},{"type":"text","text":"，通过"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"res"}]},{"type":"text","text":"对象可以完全控制响应；"}]}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"方案一比较正统；方案二则危险得多，官方都说要后果自负："}]},{"name":"blockquote","attrs":{"class":"rich-text-blockquote"},"children":[{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"Bypassing Koa&#39;s response handling is not supported. Avoid using the following node properties: res.statusCode, res.writeHead(), res.write(), res.end()."},{"name":"a","attrs":{"class":"rich-text-a"},"children":[{"type":"text","text":"via"}]}]}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"所以，本站最终采用了方案二。Koa 总共就几个文件，出啥奇怪的问题都不怕。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"下面开始贴代码。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"1）创建 Controller 的 Extend 文件"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"src/extend/controller.js"}]},{"type":"text","text":"："}]},{"name":"div","attrs":{"class":"rich-text-pre"},"children":[{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"const"}]},{"type":"text","text":"firstChunkMinLength ="},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"4096"}]},{"type":"text","text":";"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"module"}]},{"type":"text","text":".exports = {"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"async"}]},{"type":"text","text":"renderAndFlush(tpl) {"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"let"}]},{"type":"text","text":"content ="},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"await"}]},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".render(tpl);"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"//first chunk"}]},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"if"}]},{"type":"text","text":"(!"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".ctx.headerSent) {"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".ctx.type ="},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'html'"}]},{"type":"text","text":";"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".ctx.flushHeaders();"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"let"}]},{"type":"text","text":"length = content.length;"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"if"}]},{"type":"text","text":"(length &lt; firstChunkMinLength) { content +="},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"`&lt;s&gt;"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"${' '.repeat(firstChunkLength - length)}"}]},{"type":"text","text":"&lt;/s&gt;`"}]},{"type":"text","text":"; } }"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".ctx.res.write(content); } };"}]}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"输出第一个 chunk 之前，需要通过 ctx 的"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"type"}]},{"type":"text","text":"setter 和"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"flushHeaders"}]},{"type":"text","text":"方法来输出响应起始行和头部。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"第一个 chunk 不能太小，否则会被某些浏览器缓存起来，不会马上显示，达不到我们想要的效果。更多细节可以点开这个"},{"name":"a","attrs":{"class":"rich-text-a"},"children":[{"type":"text","text":"stackoverflow 的链接"}]},{"type":"text","text":"自己看。另外，我在实际测试中发现，只补空格 iOS Safari 依然不会立刻渲染，把空格放在标签里就没问题。也可能是我的幻觉，欢迎大家测试并指正。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"2）在 Controller 里将原本渲染模板的逻辑根据实际情况拆分为多步："}]},{"name":"div","attrs":{"class":"rich-text-pre"},"children":[{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"async"}]},{"type":"text","text":"indexAction() {"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"let"}]},{"type":"text","text":"pageName ="},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'blog-home'"}]},{"type":"text","text":";"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"let"}]},{"type":"text","text":"title ="},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'JerryQu 的小站'"}]},{"type":"text","text":";"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".assign({ pageName, title});"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"//输出头部和边栏 HTML"}]},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"await"}]},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".renderAndFlush("},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'home/inc/header'"}]},{"type":"text","text":");"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"//查询数据库（耗时操作）"}]},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"let"}]},{"type":"text","text":"pn ="},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".get("},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'pn'"}]},{"type":"text","text":");"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"let"}]},{"type":"text","text":"data ="},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"await"}]},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".model("},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'post'"}]},{"type":"text","text":").getPostList(pn,"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"10"}]},{"type":"text","text":"); data.pagerPath = getPagerPath("},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".ctx,"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'pn'"}]},{"type":"text","text":");"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".assign(data);"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"//输出剩余 HTML"}]},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"return"}]},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"this"}]},{"type":"text","text":".display("},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'home/index_post_list'"}]},{"type":"text","text":"); }"}]}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"也就是说需要提前发送的模板通过 renderAndFlush 来渲染并发送，剩余模板还是走原有的 display 逻辑。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"至此，本文要介绍的优化工作已经完成，赶紧打开浏览器验证一下吧。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"但是如果你照着我的代码改造，肯定会遇到不少坑，下面列举几个："}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"1）原本的异常逻辑重定向到错误页不好用，直接提示"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"Can&#39;t set headers after they are sent."}]},{"type":"text","text":"错误。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"这个错误信息已经把原因描述得很明白，HTTP/1 的响应需要严格按照起始行、头部和正文的顺序发送，已经发送了正文，就不能再通过 30X 状态码和"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"Location"}]},{"type":"text","text":"头部来跳转页面。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"解决方案：有一些会产生跳转的逻辑例如参数合法性检查，可以挪到发送第一个分块之前来进行。另一些异常跳转逻辑则无法提前，例如查询数据库后发现不存在对应的文章，这种情况可以输出一段 JS 代码在浏览器中跳转，或者直接渲染错误页面。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"2）提前输出的模板中部分变量取不到值。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"例如本站第一个分块输出了左侧内容，这个分块对应的模板中，有很多字段原本来自数据库查询后的结果，提前渲染必然取不到值。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"解决方案：这些需要用到数据库字段的逻辑，有一些可以挪到后续分块中；有一些则不好后移，例如需要动态赋值的页面"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"&lt;title&gt;"}]},{"type":"text","text":"，只能放在"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"&lt;head&gt;"}]},{"type":"text","text":"里。一种方案是继续使用万能的 JS，通过后续分块中的"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"docuemnt.title"}]},{"type":"text","text":"来给页面 title 赋值。对于不支持 JS 的 Spider，可以禁用提前输出响应策略。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"我使用了另外一套方案：由于文章数量不多，我索性在程序启动时，把全部文章 ID 和标题对应关系从数据库取出来，存在配置中。这样，后续第一个分块获取标题时无需查询数据库。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"下面这段代码需要放在"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"src/bootstrap/worker.js"}]},{"type":"text","text":"："}]},{"name":"div","attrs":{"class":"rich-text-pre"},"children":[{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"//HTTP 服务启动前执行"}]},{"type":"text","text":"think.beforeStartServer("},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"async"}]},{"type":"text","text":"() =&gt; {"},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"let"}]},{"type":"text","text":"postTitle = {}; ("},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"await"}]},{"type":"text","text":"think.model("},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'post'"}]},{"type":"text","text":").field(["},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'slug'"}]},{"type":"text","text":","},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'title'"}]},{"type":"text","text":"]).select()).forEach(item =&gt; { postTitle[item.slug] = item.title; }); think.config("},{"name":"span","attrs":{"class":"rich-text-span"},"children":[{"type":"text","text":"'postTitle'"}]},{"type":"text","text":", postTitle); });"}]}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"3）Middleware 中获取到的"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"ctx.body"}]},{"type":"text","text":"不是完整页面。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"本方案只有最后一个分块内容才会赋值给"},{"name":"code","attrs":{"class":"rich-text-code"},"children":[{"type":"text","text":"ctx.body"}]},{"type":"text","text":"，前面分块的输出则完全绕过了 Middleware，出现这种情况是正常的。如果你不能接受，还是老老实实用 Readable Stream 吧。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"最后，看完本文，相信你对如何优化 ThinkJS 3 网站的 TTFB 时间有了足够了解，赶紧动手试试吧。遇到任何问题，欢迎留言讨论。"}]},{"name":"p","attrs":{"class":"rich-text-p"},"children":[{"type":"text","text":"本文链接："},{"name":"a","attrs":{"class":"rich-text-a"},"children":[{"type":"text","text":"https://imququ.com/post/reduce-ttfb-on-thinkjs3-website.html"}]},{"type":"text","text":"，"},{"name":"a","attrs":{"class":"rich-text-a"},"children":[{"type":"text","text":"参与讨论"}]}]}]
